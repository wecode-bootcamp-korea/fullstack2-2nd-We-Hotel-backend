// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
generator client {
  provider = "prisma-client-js"
}


model Category {
  id           Int            @id @default(autoincrement())
  name         String

  accomodation Accomodation[]

  @@map("categories")
}

model Accomodation {
  id            Int      @id @default(autoincrement())
  name          String
  grade         String
  categoryId    Int      @map("category_id")
  detailAddress String   @map("detail_address")
  createdAt     DateTime @default(now()) @map("created_at")
  townId        Int      @map("town_id")

  host Host[]
  accomodationImage AccomodationsImage[]
  like Like[]
  clickAccomodation ClickedAccomodation[]
  room Room[]

  town Town @relation(fields: [townId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@map("accomodations")
}

model City {
  id   Int    @id @default(autoincrement())
  name String

  town Town[]

  @@map("cities")
}

model Town {
  id     Int    @id @default(autoincrement())
  name   String
  cityId Int    @map("city_id")

  accomcdation Accomodation[]

  city City @relation(fields: [cityId], references: [id])

  @@map("towns")
}

model DiscountedType {
  id         Int    @id @default(autoincrement())
  percentage Int
  type       String @db.VarChar(2000)
  
  roomsDiscountedType RoomsDiscountedType[]

  @@map("discounted_types")
}

model RoomsDiscountedType {
  id                Int @id @default(autoincrement())
  discountedTypeId  Int @map("discounted_type_id")
  roomId            Int @map("room_id")

  discountedType DiscountedType @relation(fields: [discountedTypeId], references: [id])
  room Room @relation(fields: [roomId], references: [id])

  @@map("room_discounted_types")
}

model AccomodationsImage {
  id             Int    @id @default(autoincrement())
  imageUrl       String @map("image_url") @db.VarChar(2000)
  accomodationId Int    @map("accomodation_id")

  accomodation Accomodation @relation(fields: [accomodationId], references: [id])

  @@map("accomodations_images")
}

model RoomImage {
  id        Int    @id @default(autoincrement())
  imageUrl  String @map("image_url") @db.VarChar(2000)
  roomId    Int    @map("room_id")
  name      String

  room Room @relation(fields: [roomId], references: [id])

  @@map("room_images")
}

model RoomGrade {
  id     Int    @id @default(autoincrement())
  name   String
  roomId Int @map("room_id")

  room Room @relation(fields: [roomId], references: [id])

  @@map("room_grades")
}

model Room {
  id             Int     @id @default(autoincrement())
  name           String
  roomGradeId    Int     @map("room_grade_id")
  bedTypeId      Int     @map("bed_type_id")
  standardPeople Int     @map("standard_people")
  maxPeople      Int     @map("max_people")
  etc            String
  price          Decimal @db.Decimal(8, 0)
  accomodationId Int     @map("accomodation_id")
  isReserved     Int     @map("is_reserved") @db.TinyInt

  reservation Reservation[]
  roomGrade RoomGrade[]
  roomImage RoomImage[]
  bedType BedType[]
  roomsDiscountedType RoomsDiscountedType[]

  accomodation Accomodation @relation(fields: [accomodationId], references: [id])
  
  @@map("rooms")
}

model BedType {
  id     Int    @id @default(autoincrement())
  name   String
  roomId Int @map("room_id")

  room Room @relation(fields: [roomId], references: [id])

  @@map("bed_types")
}

model Reservation {
  id           Int       @id @default(autoincrement())
  userId       Int       @map("user_id")
  roomId       Int       @map("room_id")
  startDate    DateTime  @default(now()) @map("start_date")
  endDate      DateTime? @map("end_date")
  personnel    Int
  byCar        Boolean   @default(false) @map("by_car")
  policyAgreed Boolean   @map("policy_agreed") @db.TinyInt
  totalPrice   Decimal   @map("total_price") @db.Decimal(8, 0)
  isAdult      Int       @map("is_adult") @db.TinyInt

  guest Guest[]
  review Review[]

  user User @relation(fields: [userId], references: [id])
  room Room @relation(fields: [roomId], references: [id])
  
  @@map("reservations")
}

model Guest {
  id               Int    @id @default(autoincrement())
  guestName        String @map("guest_name")
  guestPhoneNumber String @map("guest_phone_number")
  guestEmail       String @map("guest_email")
  reservationId    Int    @map("reservation_id")


  reservation Reservation @relation(fields: [reservationId], references: [id])

  @@map("guests")
}

model Review {
  id            Int       @id @default(autoincrement())
  scores        Decimal   @db.Decimal(1, 1)
  reviewContent String    @map("review_content")
  userId        Int       @map("user_id")
  reservationId Int       @map("reservation_id")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime? @map("updated_at")
  deletedAt     DateTime  @map("deleted_at")
  isDeleted     Int       @map("is_deleted") @db.TinyInt

  reviewImage ReviewImage[]

  user User @relation(fields: [userId], references:[id])
  reservation Reservation @relation(fields: [reservationId], references:[id])

  @@map("reviews")
}

model ReviewImage {
  id       Int    @id @default(autoincrement())
  imageUrl String @map("image_url") @db.VarChar(2000)
  reviewId Int    @map("review_Id")

  review Review @relation(fields: [reviewId], references: [id])

  @@map("review_images")
}

model User {
  id           Int       @id @default(autoincrement())
  nickname     String
  email        String
  phoneNumber  String    @map("phone_number")
  socialId     String    @map("sosial_id")
  policyAgreed Int       @map("policy_agreed") @db.TinyInt
  birthday     DateTime
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime? @map("updated_at")
  deletedAt    DateTime  @map("deleted_at")
  isDeleted    Int       @map("is_deleted") @db.TinyInt

  like Like[]
  review Review[]
  reservation Reservation[]
  clickedAccomodation ClickedAccomodation[]

  @@map("users")
}

model Host {
  id             Int    @id @default(autoincrement())
  email          String
  password       String
  accomodationId Int    @map("accomodation_id")

  accomodation Accomodation @relation(fields: [accomodationId], references: [id])

  @@map("hosts")
}

model Like {
  id             Int @id @default(autoincrement())
  userId         Int @unique @map("user_id")
  accomodationId Int @unique @map("accomodation_id")

  user User @relation(fields: [userId], references: [id])
  accomodation Accomodation @relation(fields: [accomodationId], references: [id])
  
  @@map("likes")
}

model ClickedAccomodation {
  id             Int @id @default(autoincrement())
  userId         Int @map("user_id")
  accomodationId Int @map("accomodation_id")

  user User @relation(fields: [userId], references: [id])
  accomodation Accomodation @relation(fields: [accomodationId], references: [id])

  @@map("clicked_accomodations")
}
