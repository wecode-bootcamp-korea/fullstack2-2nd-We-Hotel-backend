// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model MainCategory {
  id   Int    @id @default(autoincrement())
  name String

  subCategory SubCategory[]

  @@map("main_categories")
}

model SubCategory {
  id             Int    @id @default(autoincrement())
  name           String
  mainCategoryId Int    @map("main_category_id")

  accommodation Accommodation[]

  mainCategory MainCategory @relation(fields: [mainCategoryId], references: [id])

  @@map("sub_categories")
}

model Accommodation {
  id            Int      @id @default(autoincrement())
  name          String
  grade         String
  subCategoryId Int      @map("sub_category_id")
  detailAddress String   @map("detail_address")
  createdAt     DateTime @default(now()) @map("created_at")
  townId        Int      @map("town_id")

  accommodationImage AccommodationsImage[]
  like               Like[]
  room               Room[]

  town        Town        @relation(fields: [townId], references: [id])
  subCategory SubCategory @relation(fields: [subCategoryId], references: [id])

  @@map("accommodations")
}

model City {
  id   Int    @id @default(autoincrement())
  name String

  town Town[]
  @@map("cities")
}

model Town {
  id     Int    @id @default(autoincrement())
  name   String
  cityId Int    @map("city_id")

  accommcdation Accommodation[]
  city          City            @relation(fields: [cityId], references: [id])
  @@map("towns")
}

model DiscountedType {
  id         Int    @id @default(autoincrement())
  percentage Int
  type       String @db.VarChar(2000)

  roomsDiscountedType RoomsDiscountedType[]
  @@map("discounted_types")
}

model RoomsDiscountedType {
  id               Int @id @default(autoincrement())
  discountedTypeId Int @map("discounted_type_id")
  roomId           Int @map("room_id")

  discountedType DiscountedType @relation(fields: [discountedTypeId], references: [id])
  room           Room           @relation(fields: [roomId], references: [id])
  @@map("room_discounted_types")
}

model AccommodationsImage {
  id              Int    @id @default(autoincrement())
  imageUrl        String @map("image_url") @db.VarChar(2000)
  accommodationId Int    @map("accommodation_id")

  accommodation Accommodation @relation(fields: [accommodationId], references: [id])
  @@map("accommodations_images")
}

model RoomImage {
  id       Int    @id @default(autoincrement())
  imageUrl String @map("image_url") @db.VarChar(2000)
  roomId   Int    @map("room_id")
  name     String

  room Room @relation(fields: [roomId], references: [id])
  @@map("room_images")
}

model RoomGrade {
  id   Int    @id @default(autoincrement())
  name String

  @@map("room_grades")
}

model Room {
  id              Int     @id @default(autoincrement())
  name            String
  roomGradeId     Int     @map("room_grade_id")
  bedTypeId       Int     @map("bed_type_id")
  standardPeople  Int     @map("standard_people")
  maxPeople       Int     @map("max_people")
  etc             String
  price           Decimal @db.Decimal(8, 0)
  accommodationId Int     @map("accommodation_id")
  isReserved      Boolean @default(false) @map("is_reserved")

  reservation         Reservation[]
  roomImage           RoomImage[]
  roomsDiscountedType RoomsDiscountedType[]
  accommodation       Accommodation         @relation(fields: [accommodationId], references: [id])

  @@map("rooms")
}

model BedType {
  id   Int    @id @default(autoincrement())
  name String

  @@map("bed_types")
}

model Reservation {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  roomId       Int      @map("room_id")
  startDate    DateTime @map("start_date") @db.Date
  endDate      DateTime @map("end_date") @db.Date
  createdAt    DateTime @default(now()) @map("created_at")
  personnel    Int
  byCar        Boolean  @default(false) @map("by_car")
  policyAgreed Boolean  @default(true) @map("policy_agreed")
  totalPrice   Decimal  @map("total_price") @db.Decimal(8, 0)
  isAdult      Boolean  @default(true) @map("is_adult")

  guest  Guest[]
  review Review[]
  user   User     @relation(fields: [userId], references: [id])
  room   Room     @relation(fields: [roomId], references: [id])
  @@map("reservations")
}

model Guest {
  id               Int    @id @default(autoincrement())
  guestName        String @map("guest_name")
  guestPhoneNumber String @map("guest_phone_number")
  guestEmail       String @map("guest_email")
  reservationId    Int    @map("reservation_id")

  reservation Reservation @relation(fields: [reservationId], references: [id])
  @@map("guests")
}

model Review {
  id            Int       @id @default(autoincrement())
  scores        Decimal   @db.Decimal(1, 1)
  reviewContent String    @map("review_content")
  userId        Int       @map("user_id")
  reservationId Int       @map("reservation_id")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime? @map("updated_at")
  deletedAt     DateTime? @map("deleted_at")
  isDeleted     Boolean   @default(false) @map("is_deleted")

  reviewImage ReviewImage[]
  user        User          @relation(fields: [userId], references: [id])
  reservation Reservation   @relation(fields: [reservationId], references: [id])
  @@map("reviews")
}

model ReviewImage {
  id       Int    @id @default(autoincrement())
  imageUrl String @map("image_url") @db.VarChar(2000)
  reviewId Int    @map("review_Id")

  review Review @relation(fields: [reviewId], references: [id])
  @@map("review_images")
}

model User {
  id           Int       @id @default(autoincrement())
  nickname     String
  email        String
  phoneNumber  String    @map("phone_number")
  socialId     String?   @map("social_id")
  policyAgreed Boolean   @default(true) @map("policy_agreed")
  birthday     DateTime  @db.Date
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime? @map("updated_at")
  deletedAt    DateTime? @map("deleted_at")
  isDeleted    Boolean   @default(false) @map("is_deleted")

  like        Like[]
  review      Review[]
  reservation Reservation[]

  @@map("users")
}

model Like {
  id              Int @id @default(autoincrement())
  userId          Int @map("user_id")
  accommodationId Int @map("accommodation_id")

  user          User          @relation(fields: [userId], references: [id])
  accommodation Accommodation @relation(fields: [accommodationId], references: [id])
  @@map("likes")
}
